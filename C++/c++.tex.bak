\documentclass[a4paper,11pt]{article}

\renewcommand\thesection{\arabic{section}.}

\usepackage{tocloft}
\cftsetindents{section}{0em}{2em}
\cftsetindents{subsection}{0em}{2em}
\renewcommand\cfttoctitlefont{\hfill\Large\bfseries}
\renewcommand\cftaftertoctitle{\hfill\mbox{}}
\setcounter{tocdepth}{2}

\usepackage{listings}
\usepackage{xcolor}

\usepackage{fullpage}

\usepackage{float}

\usepackage{amsfonts}

\usepackage{sectsty}
\sectionfont{\fontsize{14}{15}\selectfont}

\usepackage{graphicx}
\usepackage[margin=0.6in,includefoot,headsep=0.1in]{geometry}
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\cfoot{\thepage}
\rfoot{P. T. O.}
\lfoot{ROHIT DAS 30000114022}

\usepackage{booktabs}
\usepackage{tabularx}

%\usepackage{array}
%\newcolumntype{P}[1]{>{\centering\arraybackslash}p{#1}}

\lstset { %
    language=C++,
    backgroundcolor=\color{black!5}, % set backgroundcolor
    basicstyle=\large,% basic font setting
}

\newcommand*{\plogo}{\fbox{$\mathcal{PL}$}} % Generic publisher logo

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\newcommand*{\titleGM}{\begingroup % Create the command for including the title page in the document
\hbox{ % Horizontal box
\hspace*{0.2\textwidth} % Whitespace to the left of the title page
\rule{1pt}{\textheight} % Vertical line
\hspace*{0.05\textwidth} % Whitespace between the vertical line and title page text
\parbox[b]{0.75\textwidth}{ % Paragraph box which restricts text to less than the width of the page

{\noindent\Huge\bfseries Programming Practices \\[0.5\baselineskip] Using C++.}\\[2\baselineskip] % Title
{\large \textit{-supervised by:}\\\\\Large \textsc Prof. Kaushik Majumdar, and\\\\Prof. Mihir Singh}\\[4\baselineskip] % Tagline or further description

{\Large \textsc{\textbf{Rohit Das}}} % Author name
{\\\\\Large{B. Tech(Computer Sc. and Engg)}\\\\\Large{Roll: 30000114022\\\\\Large{Regn. No.:143000110023}\\\\\Large{5th Semester,2016}}}
\vspace{120pt} % Whitespace between the title block and the publisher
\begin{figure}[H]
\hspace*{100pt}
\includegraphics[width=90pt,height=\textheight,keepaspectratio]{/home/mouri/Pictures/makaut.jpg}
\end{figure}
{\noindent \textit{\large{Maulana Abul Kalam Azad University of Technology,\\\\West Bengal\\\\2016}}}\\[\baselineskip] % Publisher and logo
}}
\endgroup}

\begin{document}
%\pagestyle{empty} % Removes page numbers
\thispagestyle{empty}
\titleGM % This command includes the title page

\iffalse
\title{\textbf{\Huge Maulana Abul Kalam Azad University of\\[10pt] Technology}}
\date{\vspace{-5ex}}
\maketitle
\begin{center}
\textbf{\LARGE{(C++ Assignment)}}
\end{center}
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/Pictures/makaut.jpg}
\end{figure}
.

\begin{flushright}
\underline{\textbf{\author{\Huge Rohit Das}}}\\
\textbf{\LARGE{
B. Tech(CSE),5th Year\\
Roll No.: 3000114022\\
Regn. No.: 143000110023\\
Taught by: Prof. Kaushik Majumdar/ Prof. Mihir Singh\\
}}
\end{flushright}
%\tableofcontents
%\begin{table}[htbp]
%\centering
\fi

\begin{center}
\LARGE\textbf{\underline{INDEX}}
\end{center}
\thispagestyle{empty}
\begin{tabular}{|c|p{0.48\linewidth}|c|c|c|}
\textbf{Sl. No.}&\textbf{Particulars}&\textbf{Date}&\textbf{Page No.}&\textbf{Signature}\\[5pt] \hline
\\1.&Program to calculate average of cricket players.& 28/9/16 & 3 &\\ \hline
\\2.&Program to calculate cost for consumer.& 28/9/16 & 4 &\\ \hline
\\3.&Program to display votes received in election.& 28/9/16 & 5 &\\ \hline
\\4.&Program for operation on array elements.& 19/10/16 & 6 &\\ \hline
\\5.&Program to calculate factorial of a number.& 19/10/16 & 7 &\\ \hline
\\6.&Program to calculate sum of series$1+22+32+42+...$.& 19/10/16 & 7 &\\ \hline
\\7.&Program to add values of Complex no. objects.& 9/11/16 & 8 &\\ \hline
\\8.&Program to convert distances to inches and add.& 28/9/16 & 9 &\\ \hline
\\9.&Program for String class with different costructors.& 9/11/16 & 10 &\\ \hline
\\10.&Program to display unique roll of Student objects.& 9/11/16 & 10 &\\ \hline
11.&Program to swap values of objects using 'friend' function.& 9/11/16 & 11 &\\ \hline
\\12.&Program for operation on matrices.& 16/11/16 & 12 &\\ \hline
13.&Program to use overloaded operators on float numbers.& 16/11/16 & 14 &\\ \hline
\\14.&Program to compare two strings by '==' operator.& 16/11/16 & 15 &\\ \hline
\\15.&Program to implement current and savings a/c.& 23/11/16 & 16 &\\ \hline
\\16.&Previous program rewritten using constructors.& 23/11/16 & 18 &\\ \hline
\\17.&Program for an educational institution.& 23/11/16 & 20 &\\ \hline
\\18.&Program to implement a network.& 23/11/16 & 23 &\\ \hline
\\19.&Program to show overriding using 'virtual'.& 30/11/16 & 24 &\\ \hline
\\20.&Program to implement Shape class using 'virtual'.& 30/11/16 & 25 &\\ \hline
\\21.&Previous program rewritten without using 'virtual'.& 30/11/16 & 26 &\\ \hline
\\22.&Program to use template for an array.& 7/12/16 & 27 &\\ \hline
23.&Program to implement exception handling with multiple catch.& 7/12/16 & 28 &\\ \hline
\\24.&Program to implement rethrowing an exception.& 7/12/16 & 29 &\\ \hline
\\25.&Program to implement a generic vector.& 27/12/16 & 29 &\\ \hline
\end{tabular}
%\end{table}

\section{Write a program for a cricket player having the following attributes:\\$*$name, $*$runs, $*$innings and $*$not out.\\The program should calculate the average of each player, and show the same as output.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include <iostream>
#include<cstdio>
using namespace std;
typedef struct player{
    char name[50];
    int runs;
    int innings;
    int not_out;
    float avg;
}player;
int main() {
	printf("Enter no. of players:\n");
	int n;
	scanf("%d",&n);
	player a[n];
	for(int i=0;i<n;i++){
	    printf("Enter name, runs, innings, and not-out for player %d:
	     \n",(i+1));
	    scanf("%s",a[i].name);
	    scanf("%d %d%d",&a[i].runs,&a[i].innings,&a[i].not_out);
	}
	for(int i=0;i<n;i++){
	    a[i].avg=1.0*a[i].runs/(a[i].innings-a[i].not_out);
	}
	printf("Name\tRuns\tInnings\t\tNot Out\t\tAverage \n");
	for(int i=0;i<n;i++){
	    printf("%s\t%d\t%d\t\t%d\t\t%f \n",a[i].name,a[i].runs,
	    a[i].innings,a[i].not_out,a[i].avg);
	}
	return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/9-28/ide1.png}
\end{figure}

\section{Write a program for a consumer having the following attributes:\\name and no. of units bought. The program should calculate the total cost for each consumer, and show the same as output.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include <iostream>
#include <cstdio>
using namespace std;
typedef struct consumer{
    int sl;
    char name[50];
    int units;
    float cost;
}consumer;
int costing(int n){
    float cost1=50;
    if(n<=100)cost1+=n*0.60;
    else if(n>100&&n<=300)cost1+=((n-100)*0.80)+60;
    else cost1+=140+(n-300)*0.90;
    if(cost1>300)cost1=cost1-(cost1*0.15);
    return cost1;
}
int main() {
    int count,i=0;
    count=1;
    consumer a[50];
	while(1){
	    a[i].sl=i+1;
	    cout<<"Enter name of Consumer:"<<endl;
	    scanf("%s",a[i].name);
	    cout<<"Enter no. of units:"<<endl;
	    cin>>a[i].units;
	    count++;
	    if(count>5)break;
	    i++;
	}
	i=0;
	cout<<"Sl No.\t"<<"Consumer\t"<<"Units\t"<<"Cost"<<endl;
	while(i<count){
	    a[i].cost=costing(a[i].units);
	    if(a[i].units!=-1&&a[i].units!=0)printf("%d  \t  %s\t\t%d\t
	    %f\n",a[i].sl,a[i].name,
	    a[i].units,a[i].cost);
	    i++;
	}
	return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=200pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/9-28/ide2.png}
\end{figure}
.


\section{Write a program taking as input the no. of candidates for an election and the votes each got. The output will display how many votes each got.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include <iostream>
using namespace std;
int main() {
	int n,vote;
	static int arr[100];
	int i=0;
	cout<<"Enter no. of candidates:"<<endl;
	cin>>n;
	i=0;
	while(i<n){
	    cout<<"Enter vote for your candidate(1,2,3,4 or 5):"<<endl;
	    cin>>vote;
	    arr[vote]++;
	    i++;
	    if(vote==-1||vote>5)break;
	}
	i=0;
	while(i<n){
	    cout<<"Candidate "<<i+1<<" got "<<arr[i+1]<<" votes."<<endl;
	    i++;
	}
	return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/9-28/ide3.png}
\end{figure}
.


\section{Write a program with a function to take array(s) and size as input and:\\$*$return largest and smallest element, and\\$*$search an element and return 1 if present, 0 if absent.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#define swap(a,b) (a)=(b)-(a)+((b)=(a))
using namespace std;
int largest(int a[],int size){
	int largest=a[0];
	for(int i=1;i<size;i++)if(a[i]>largest)largest=a[i];
	return largest;
}
int smallest(int a[],int size){
	int smallest=a[0];
	for(int i=1;i<size;i++)if(a[i]<smallest)smallest=a[i];
	return smallest;
}
int search(int a[],int size,int key){
	int flag=0;
	for(int i=0;i<size;i++){if(key==a[i]){flag=1; break; }}
	if(flag==1)return 1;
	else return 0;
}
int main(){
	int n;
	printf("Enter a size for array: \n");
	scanf("%d",&n);
	int a[n];
	printf("Enter elements for array: \n");
	for(int i=0;i<n;i++)scanf("%d",&a[i]);
	for(int i=0;i<n;i++)printf("%d ",a[i]);
	printf("\n");
	printf("Largest element is %d \n",largest(a,n));
	printf("Smallest element is %d \n",smallest(a,n));
	int key=0;
	printf("Enter key to be searched:\n");
	scanf("%d",&key);
	if(search(a,n,key)==1)printf("Element %d was found in array.\n",
	key);
	else printf("Element %d was not found in array.\n",key);
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/10-19/array.png}
\end{figure}
.


\section{Write a program to calculate factorial of a number using function.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
int fact(int d){
	int f=1;
	while(d)f*=d--;
	return f;
}
int main(){
	printf("Enter no. to calculate factorial:\n");
	int n=0;
	scanf("%d",&n);
	printf("The factorial of %d is %d \n",n,fact(n));
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/10-19/fact.png}
\end{figure}
.


\section{Write a program to find out the sum of the series using function:\\$1+22+32+42+....$till n terms (taking n as parameter) and return sum of the series.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
int sum(int n){
	int s=12,add=0;
	int count=0;
	while(count<n){
		s+=((count++)*10);
		add+=s;
	}
	return add-11;
}
int main(){
	int n;
	printf("Enter no of terms: \n");
	scanf("%d",&n);
	printf("The sum of series is %d.\n",sum(n));
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/10-19/sum1.png}
\end{figure}
.


\section{Write a program to pass Complex numbers as objects and add them.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
class Complex{
	public:
		int x,y;
		Complex(){}
		Complex(int x,int y)
		{
			this->x=x;
			this->y=y;
		}
		static Complex sum(Complex a,Complex b)
		{
			Complex c;
			c.x=a.x+b.x;
			c.y=a.y+b.y;
			return c;
		}
		void display()
		{
			printf("THe number is %d+%di.\n",x,y);
		}
};
int main(){
	Complex c1(10,20);
	c1.display();
	Complex c2(20,30);
	c2.display();
	printf("After addition:\n");
	Complex c3;
	c3=Complex::sum(c1,c2);
	c3.display();
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-9/complex.png}
\end{figure}
.


\section{Write a program to take distances as input, one in inches, other in metres and to convert the distances in inches and add.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
class DM{
	int a,b;
	public:
		DM(){}
		DM(int a,int b){
			this->a=a;
			this->b=b;
		}
		friend float convert(DM);
};
class DB{
	float x,y;
	public:	
		DB(){}
		DB(float x,float y){
			this->x=x;
			this->y=y;
		}
		friend float convert(DM obj1){
			return obj1.a*2.25f;
		}
		void add(DM a){
			y+=convert(a);
			printf("Total dist in inches is: %f",y);
		}
};
int main(){
	DM a(10,0);
	DB b(0,6);
	b.add(a);
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-9/dist.png}
\end{figure}
.

\section{Write a program to create String class having one uninitialized and a parameterized constructor.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<cstring>
using namespace std;
class String{
	public:
		string s;
		String(){ 	s="";	}
		String(string str){  	s=str;  	}
		void concat(string s2){	s=s+s2;	}
		void display(){	cout<<s<<endl;	}
};
int main(){
	String s2("Hello ");
	s2.concat("World");
	s2.display();
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-9/string.png}
\end{figure}
.
\section{Write a program to create a student class and create 10 objects and display the roll no. of the students. Use static data member and array to create objects. Do not use constructors.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
class Student{
	int roll;
	public:	
		static int count;
		Student(){}
		void init(){	roll=++count;		}
		void display(){	printf("%d ",roll);	}
};
int Student::count;
int main(){
	Student arr[10];
	for(int i=0;i<10;i++){
		int x=Student::count;
		arr[i].init();
	}
	printf("The rolls are: \n");
	for(int i=0;i<10;i++){
		printf("Student %d: ",i);
		arr[i].display();
		printf("\n");
	}
	return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-9/student.png}
\end{figure}
.

\section{Write a program to values of objects using 'friend' functions.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
class Swap
{
	int n;
	public:	
		Swap(){}
		Swap(int n){	this->n=n;	}
		void show(){	printf("%d \n",n);	}
		friend void swap(Swap,Swap);
};
class Swap2{
	public:
		friend void swap(Swap a,Swap b){
			Swap temp;
			printf("\na=");	a.show();
			printf("\nb=");	b.show();
			printf("\nAfter swap:\n");
			temp.n=a.n;  a.n=b.n;  b.n=temp.n;
			printf("\na=");	a.show();
			printf("\nb=");	b.show();
		}
	
};
int main(){
	Swap a(10);	Swap b(20);
	Swap2 s;	swap(a,b);
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-9/swap.png}
\end{figure}
.

\section{Write a program to create a class Matrix of size m x n. Define all possible matrix operations for Matrix type objects.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
class Matrix{
	int r,c;
	public:
	int a[100][100];
	Matrix(){}
	Matrix(int row,int col){	r=row;c=col;	}
	Matrix operator+(Matrix);
	Matrix operator-(Matrix);
	Matrix operator*(Matrix);
	void input(void);
	void display(void);
};
Matrix Matrix::operator+(Matrix c){
	Matrix temp(2,2);
	for(int i=0;i<c.r;i++){
		for(int j=0;j<c.c;j++){
			temp.a[i][j]=a[i][j]+c.a[i][j];	
		}	
	}
	return (temp);
}
Matrix Matrix::operator-(Matrix c){
	Matrix temp(2,2);
	for(int i=0;i<c.r;i++){
		for(int j=0;j<c.c;j++){
			temp.a[i][j]=a[i][j]-c.a[i][j];	
		}	
	}
	return (temp);
}
Matrix Matrix::operator*(Matrix c){
	Matrix temp(2,2);
	for(int i=0;i<r;i++){
		for(int j=0;j<c.c;j++){
			for(int k=0;k<c.r;k++){
				temp.a[i][j]=a[i][k]*c.a[k][j];
			}
		}	
	}
	return (temp);
}
void Matrix::input(void){
	printf("Enter data for matrix(%d x %d):",r,c);
	for(int i=0;i<r;i++){
		for(int j=0;j<c;j++){
			scanf("%d",&a[i][j]);
		}
	}
}
void Matrix::display(void){
	printf("The data for matrix \n");
	for(int i=0;i<r;i++){
		for(int j=0;j<c;j++)printf("%d ",a[i][j]);
		printf("\n");
	}
}
int main(){
	Matrix m1,m2,m3;
	m1=Matrix(2,2);	m1.input();
	m2=Matrix(2,2);	m2.input();
	m3=m1+m2;
	printf("Matrix 1=");	m1.display();
	printf("Matrix 2=");	m2.display();
	cout<<"Sum is:"<<endl;
	printf("Matrix 3=");	m3.display();
	m3=m1-m2;
	cout<<"DIfference is:"<<endl;
	printf("Matrix 3=");	m3.display();
	m3=m1*m2;
	cout<<"Product is:"<<endl;
	printf("Matrix 3=");	m3.display();
	return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-16/matrix.png}
\end{figure}
.

\section{Write a program to create a class FLOAT that contains one float data member. Overload all the four arithmetic operators so that they operate on the objects of FLOAT.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
using namespace std;
class Float{
	float x;
	public:
		Float(){}
		Float(float a){	x=a;	}
		Float operator+(Float);
		Float operator-(Float);
		Float operator*(Float);
		Float operator/(Float);
		void display(void);
};
Float Float::operator+(Float c){	return Float(x+c.x);	}
Float Float::operator-(Float c){	return Float(x-c.x);	}
Float Float::operator*(Float c){	return Float(x*c.x);	}
Float Float::operator/(Float c){	return Float(x/c.x);	}
void Float::display(void){	printf("%f \n",x);	}
int main(){
	Float f1,f2,f3;
	f1=Float(1.5);	f2=Float(2.5);
	f3=f1+f2;
	printf("f1=");	f1.display();
	printf("f2=");	f2.display();
	cout<<"Sum is:"<<endl;
	printf("f3=");	f3.display();
	cout<<"Difference is:"<<endl;
	f3=f1-f2;
	printf("f3=");	f3.display();
	cout<<"Product is:"<<endl;
	f3=f1*f2;	
	printf("f3=");	f3.display();
	cout<<"Quotient is:"<<endl;
	f3=f1/f2;
	printf("f3=");	f3.display();
	return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-16/opload1.png}
\end{figure}
.

\section{Write a program to compare two strings by overloading the '==' operator.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
using namespace std;
class String{
	string s;
	public:
	String(){	s="";	}
	String(string _s){	s=_s;	}
	string operator==(String);
};
string String::operator==(String str){
	if(s==str.s)return "Equals\n";
	else return "Not equals\n";
}
int main(){
	String s1("Hello"),s2("Hola"),s3("Hello");
	cout<<"Comparing Hello and Hola:"<<endl;
	cout<<(s1==s2);
	cout<<"Comparing Hello and Hello:"<<endl;
	cout<<(s1==s3);
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-16/string.png}
\end{figure}
.

\section{Write a program to create a class account that stores customer name, account number and type of account. Create two more classes for current a/c and savings a/c. The current a/c will have:\\$*$cheque facility, \\$*$ minimum balance and deduction for balance below that,\\$*$deposit and withdrawal. The saving a/c will have similar member methods, except for cheque and minimum balance, it will have an interest calculation. Do not use constructors.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
class Account{
    string customer_name,acct_type;
    ll acct;
};
class Cur_acct:public Account{
    double balance,minBal;
    public:
	void setbal(double a,double b)	{
	    balance=a;
	    minBal=b;
	}
	void withdrawal(int n)	{
	    if(balance<minBal)balance-=(balance*0.10);
	    else if(n>balance)printf("Insufficient balance.\n");
	    else balance-=n;
	}
	void deposit(int n){    balance+=n;	}
	void cheque(){ cout<<"Deposited by cheque..."<<endl;	}
	void show(){
	    printf("Current balance=%.2f\n",balance);
	}
};
class Sav_acct:public Account{
    double balance;
    public:
	void setbal(double a){    balance=a;	}
	void withdrawal(int n){
	    if(n>balance)printf("Insufficient balance.\n");
	    else balance-=n;
	}
	void deposit(int n){    balance+=n;	}
	void interest(){    balance+=(balance*0.20);	}
	void show(){
	    printf("Current balance:%.2f\n",balance);
	}
};
int main(){
    cout<<"Enter type of account(s for savings, c for current):"<<endl;
    char c;    cin>>c;
    cout<<"Enter balance:"<<endl;
    int bal;    cin>>bal;
    if(c=='c'){
		cout<<"Enter minimum balance:"<<endl;
		int minbal;	cin>>minbal;
		Cur_acct c1;
		c1.setbal(bal,minbal);
		cout<<"Enter amount to deposit:"<<endl;
		int n;	cin>>n;
		cout<<"Do you want to use cheque or cash?(c for cheque)..
		"<<endl;
		char c;	cin>>c;
		if(c=='c')c1.cheque();
		c1.deposit(n);	cout<<"Deposited: Rs."<<n<<"\n";
		c1.show();
		cout<<"Enter amount to withdraw:"<<endl;
		cin>>n;	c1.withdrawal(n);
		cout<<"Withdrawal: Rs."<<n<<"\n";	c1.show();
		cout<<"Enter amount to withdraw:"<<endl;
		cin>>n;	c1.withdrawal(n);
		cout<<"Withdrawal: Rs."<<n<<"\n";	c1.show();
   	 }
    else{
		Sav_acct s1;
		s1.setbal(bal);
		cout<<"Enter amount to deposit:"<<endl;
		int n;	cin>>n;
		s1.deposit(n);
		cout<<"Deposited: Rs."<<n<<"\n";	s1.show();
		cout<<"Enter amount to withdraw:"<<endl;
        cin>>n;	s1.withdrawal(n);
		cout<<"Withdrawal: Rs."<<n<<"\n";
		s1.show();
    	cout<<"Enter amount to withdraw:"<<endl;
        cin>>n;	s1.withdrawal(n);
		cout<<"Withdrawal: Rs."<<n<<"\n";	s1.show();
		cout<<"Adding interest of 0.20 to current balance:"
		<<endl;
		s1.interest();	s1.show();
    }
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=250pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-23/bank.png}
\includegraphics[width=250pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-23/bank2.png}
\end{figure}
.

\section{Rewrite the above program using constructors.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
using namespace std;
class Account{
    string customer_name,acct_type;
    ll acct;
    public:
    Account(){}
    Account(string a,string b,ll c){
	customer_name=a;
	acct_type=b;
	acct=c;
    }
};
class Cur_acct:public Account{
    double balance,minBal;
    public:
	Cur_acct(double a,double b){
	    balance=a;
	    minBal=b;
	}
	void withdrawal(int n){
	    if(balance<minBal)balance-=(balance*0.10);
	    else if(n>balance)printf("Insufficient balance.\n");
	    else balance-=n;
	}
	void deposit(int n){    balance+=n;	}
	void cheque(){
	    cout<<"Deposited by cheque..."<<endl;
	}
	void show(){
	    printf("Current balance=%.2f\n",balance);
	}
};
class Sav_acct:public Account
{
    double balance;
    public:
	Sav_acct(int a){    balance=a;	}
	void withdrawal(int n){
	    if(n>balance)printf("Insufficient balance.\n");
	    else balance-=n;
	}
	void deposit(int n){    balance+=n;	}
	void interest(){    balance+=(balance*0.20);	}
	void show(){
	    printf("Current balance:%.2f\n",balance);
	}
};
int main(){
    cout<<"Enter type of account(s for savings, c for current):"<<endl;
    char c;    cin>>c;
    cout<<"Enter balance:"<<endl;
    int bal;    cin>>bal;
    if(c=='c'){
	cout<<"Enter minimum balance:"<<endl;
	int minbal;	cin>>minbal;
	Cur_acct c1(bal,minbal);
	cout<<"Enter amount to deposit:"<<endl;
	int n;	cin>>n;
	cout<<"Do you want to use cheque or cash?(c for cheque).."<<endl;
	char c;	cin>>c;
	if(c=='c')c1.cheque();
	c1.deposit(n);
	cout<<"Deposited: Rs."<<n<<"\n";	c1.show();
	cout<<"Enter amount to withdraw:"<<endl;
	cin>>n;	c1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";
	c1.show();
	cout<<"Enter amount to withdraw:"<<endl;	cin>>n;
	c1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";	c1.show();
    }
    else{
	Sav_acct s1(bal);
	cout<<"Enter amount to deposit:"<<endl;
	int n;	cin>>n;
	s1.deposit(n);
	cout<<"Deposited: Rs."<<n<<"\n";	s1.show();
	cout<<"Enter amount to withdraw:"<<endl;
    cin>>n;	s1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";
	s1.show();
	cout<<"Enter amount to withdraw:"<<endl;	cin>>n;
	s1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";	s1.show();	
	cout<<"Adding interest of 0.20 to current balance:"<<endl;
	s1.interest();	s1.show();
    }
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=250pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-23/bank.png}
\includegraphics[width=250pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-23/bank2.png}
\end{figure}
.

\section{ An educational institution wishes to maintain a database of its employees. The database is divided into a number of classes whose hierarchical relationships are shown in figure below. The figure also shows the minimum information required for each class. Specify all the classes and define functions to create the database and retrieve individual information as and when required.}
\begin{figure}[H]
\centering
\includegraphics[width=220pt,height=\textheight,keepaspectratio]{/home/mouri/Pictures/educate.png}
\end{figure}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
using namespace std;
class Account{
    string customer_name,acct_type;
    ll acct;
    public:
    Account(){}
    Account(string a,string b,ll c){
	customer_name=a;
	acct_type=b;
	acct=c;
    }
};
class Cur_acct:public Account{
    double balance,minBal;
    public:
	Cur_acct(double a,double b){
	    balance=a;
	    minBal=b;
	}
	void withdrawal(int n){
	    if(balance<minBal)balance-=(balance*0.10);
	    else if(n>balance)printf("Insufficient balance.\n");
	    else balance-=n;
	}
	void deposit(int n){    balance+=n;	}
	void cheque(){
	    cout<<"Deposited by cheque..."<<endl;
	}
	void show(){
	    printf("Current balance=%.2f\n",balance);
	}
};
class Sav_acct:public Account
{
    double balance;
    public:
	Sav_acct(int a){    balance=a;	}
	void withdrawal(int n){
	    if(n>balance)printf("Insufficient balance.\n");
	    else balance-=n;
	}
	void deposit(int n){    balance+=n;	}
	void interest(){    balance+=(balance*0.20);	}
	void show(){
	    printf("Current balance:%.2f\n",balance);
	}
};
int main(){
    cout<<"Enter type of account(s for savings, c for current):"<<endl;
    char c;    cin>>c;
    cout<<"Enter balance:"<<endl;
    int bal;    cin>>bal;
    if(c=='c'){
	cout<<"Enter minimum balance:"<<endl;
	int minbal;	cin>>minbal;
	Cur_acct c1(bal,minbal);
	cout<<"Enter amount to deposit:"<<endl;
	int n;	cin>>n;
	cout<<"Do you want to use cheque or cash?(c for cheque).."<<endl;
	char c;	cin>>c;
	if(c=='c')c1.cheque();
	c1.deposit(n);
	cout<<"Deposited: Rs."<<n<<"\n";	c1.show();
	cout<<"Enter amount to withdraw:"<<endl;
	cin>>n;	c1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";
	c1.show();
	cout<<"Enter amount to withdraw:"<<endl;	cin>>n;
	c1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";	c1.show();
    }
    else{
	Sav_acct s1(bal);
	cout<<"Enter amount to deposit:"<<endl;
	int n;	cin>>n;
	s1.deposit(n);
	cout<<"Deposited: Rs."<<n<<"\n";	s1.show();
	cout<<"Enter amount to withdraw:"<<endl;
    cin>>n;	s1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";
	s1.show();
	cout<<"Enter amount to withdraw:"<<endl;	cin>>n;
	s1.withdrawal(n);
	cout<<"Withdrawal: Rs."<<n<<"\n";	s1.show();	
	cout<<"Adding interest of 0.20 to current balance:"<<endl;
	s1.interest();	s1.show();
    }
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-23/educate.png}
\end{figure}
.

\section{Consider a class network as shown below. Define all four classes and write a program to create, update and display the information contained in master objects.}
\begin{figure}[H]
\centering
\includegraphics[width=240pt,height=\textheight,keepaspectratio]{/home/mouri/Pictures/network.png}
\end{figure}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
class Person{
    public:
    string name,code;
    void init(string a,string b){
	name=a;	code=b;
    }
    virtual void display()=0;
};
class Account:virtual public Person{
    public:
    int pay;
    void init1(string a,string b,int c){
	init(a,b);	pay=c;
    }
    void display(){
	cout<<"Name= "<<name<<endl;	cout<<"Code= "<<code<<endl;
	cout<<"Pay= "<<pay<<endl;
    }
};
class Admin:virtual public Person{
    public:
    string exp;
    void init2(string a,string b,string c){
	init(a,b);	exp=c;
    }
    void display(){
	cout<<"Name= "<<name<<endl;	cout<<"Code= "<<code<<endl;
	cout<<"Experience= "<<exp<<endl;
    }
};
class Master:public Account,public Admin{
    public:
    void init3(string a,string b,string c,int d){
	init1(a,b,d);	init2(a,b,c);
    }
    void display(){
	cout<<"Name= "<<name<<endl;	cout<<"Code= "<<code<<endl;
	cout<<"Experience= "<<exp<<endl;  cout<<"Pay= "<<pay<<endl;
    }
};
int main(){
    Master p;
    p.init3("A","0001","2 years",10000);    p.display();
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-23/network.png}
\end{figure}
.

\section{Write a program demonstrating overriding using 'virtual'.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
class Base{
    public:
	void display(){    cout<<"Display Base"<<endl;	}
	virtual void show(){    cout<<"Show Base"<<endl;	}
};
class Derived:public Base{
    public:
	void display(){    cout<<"Display Derived"<<endl;	}
	void show(){    cout<<"Show Derived"<<endl;	}
};
int main(){
    Base b;
    Derived d;    Base *bptr;
    bptr=&b;
    bptr->display();    bptr->show();
    bptr=&d;
    bptr->display();    bptr->show();
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-30/poly.png}
\end{figure}
.

\section{Write a program implementing Shape class, from which Triangle and Rectangle inherit. Use 'virtual'}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
class Shape{
    public:
    double l,b;
    void getData(double _l,double _b){
	l=_l;	b=_b;
    }
    virtual void display(){
	cout<<"Area ="<<(l*b)<<"\n";
    }
};
class Triangle:public Shape{
    public:
    void display(){
	cout<<"Area of triangle="<<(0.5*b*l)<<"\n";
    }
};
class Rectangle:public Shape{
    public:
    void display(){
		cout<<"Area of triangle="<<(l*b)<<"\n";
    }
};
class Circle:public Shape{
    public:
    void getData(int _l,int _b=0){
	l=_l;	b=_b;
    }
    void display(){
	cout<<"Area of circle="<<(3.1412*l*l)<<"\n";
  	}
};
int main()
{
    Triangle t;	Rectangle r;
    Circle c;
    double l,b;
    t.getData(4,5);	t.display();
    r.getData(4,5);	r.display();
    c.getData(5);	c.display();
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-30/shape2.png}
\end{figure}
.

\section{Rewrite the previous program without using 'virtual'.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
class Shape{
    public:
    double l,b;
    void getData(double _l,double _b){
	l=_l;	b=_b;
    }
    void display(){
	cout<<"Area ="<<(l*b)<<"\n";
    }
};
class Triangle:public Shape{
    public:
    void display(){
	cout<<"Area of triangle="<<(0.5*b*l)<<"\n";
    }
};
class Rectangle:public Shape{
    public:
    void display(){
	cout<<"Area of rectangle="<<(l*b)<<"\n";
    }
};
class Circle:public Shape{
    public:
    void getData(int _l,int _b=0){
	l=_l;	b=_b;
    }
};
int main()
{
    Triangle t;	Rectangle r;
    Circle c;
    t.getData(4,5);	t.display();
    r.getData(4,5);	r.display();
    c.getData(5);	c.display();
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/11-30/shape3.png}
\end{figure}
.

\section{Write a function template for finding the minimum value contained in an array.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
template<class R>
R minimum(R a[],int n){
    R m;    m=a[0];
    for(int i=1;i<3;i++)if(m>a[i])m=a[i];
    return m;
}
int main(){
    int x[3]={10,21,3};
    cout<<minimum(x,3)<<"\n";
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/12-7/min.png}
\end{figure}
.

\section{Write a program containing a possible exception. Perform exception handling with multiple catch.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
void excp(){
    int x=4;    int y=4;
    if(x==y)throw(x-y);
    else cout<<"Its fine"<<endl;
}
int main(){
    try{	excp();    }
    catch(int i){
	cout<<"Both are equal."<<endl;
    }
    catch(char c){
	cout<<"Character is found."<<endl;
    }
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/12-7/multcatch.png}
\end{figure}
.
\\
\section{Write a program to demonstrate the concept of rethrowing an exception.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
void excp1(){
    int x=9;    int y=7;
    if(x-y==2)throw('A');
    else cout<<"Its fine."<<endl;
}
int main(){
    try{	excp1();    }
    catch(char c){
	if(c=='B')cout<<"The diff is 2."<<endl;
	else throw;
    }
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/12-7/rethrow.png}
\end{figure}
.

\section{Write a class template to represent a generic vector. Include member functions to perform the following taks:\\$*$ to create a vector\\$*$ to modify the value of a given element\\$*$ to multiply by a scalar.}
\underline{Program:}
\begin{lstlisting}[showstringspaces=false]
#include<iostream>
#include<cstdio>
#include<string>
#include<stdlib.h>
#include<cmath>
#define ll long long int
using namespace std;
template<class T>
class vector
{
    T *v;
    public:
	void init(int size){
	    v=new int[size];
	    cout<<"Enter values"<<endl;
	    for(int i=0;i<size;i++)cin>>v[i];
	}
	T multiply(vector &a,vector &b){
	    T sum=0;
	    for(int i=0;i<3;i++)sum+=a.v[i]*b.v[i];
	    return sum;
	}
};
int main(){
    vector<int> v1;	vector<int> v2;
    vector<int> v;
    cout<<"Enter 3 values for v1:"<<endl;	v1.init(3);
    cout<<"Enter 3 values for v2:"<<endl;	v2.init(3);
    cout<<"Product="<<v.multiply(v1,v2)<<"\n";
    return 0;
}
\end{lstlisting}
Output:
\begin{figure}[H]
\centering
\includegraphics[width=350pt,height=\textheight,keepaspectratio]{/home/mouri/c++-files/12-7/vect.png}
\end{figure}
.


\end{document}