\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1.}Write a program to print the patterns below:\\ 1. * 2. * 3.* 4.* 5.}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {2.}Write a program to print all prime numbers between 1 and 100.}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {3.}Write a program to print the reverse of a number.}{5}}
\@writefile{toc}{\contentsline {section}{\numberline {4.}Write a program to print the sum of digits of a number.}{6}}
\@writefile{toc}{\contentsline {section}{\numberline {5.}Write a program to calculate the area of a circle, square, rectangle and triangle using function overloading.}{7}}
\@writefile{toc}{\contentsline {section}{\numberline {6.}Write the previous program using constructor overloading.}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {7.}Write a program to design a class representing a bank account. The class should have the following data members:\\$*$ a/c no. $*$ customer id $*$ balance amount\\The class should have member methods with the following functions:\\$*$ initialize initial value\\$*$ to deposit amount\\$*$ to withdraw amount\\$*$ to display customer id, a/c no. and current balance.}{10}}
\@writefile{toc}{\contentsline {section}{\numberline {8.}Write a program to add two complex numbers. Print the result in $(x+iy)$ form. Use objects as arguments to a method which will perform the addition and use function overloading.}{12}}
\@writefile{toc}{\contentsline {section}{\numberline {9.}Write a program to design a class Student. The class should have the following data members:\\ $*$ name $*$ roll $*$ sub-marks $*$ sports-marks $*$ grades.\\The class should have the following functions:\\$*$ initialize values for data members,\\$*$ calculate total marks,\\$*$ display total marks\\$*$ display grade}{14}}
\@writefile{toc}{\contentsline {section}{\numberline {10.}Write a program to create a student class and create 10 objects and display the roll no. of the students. Use static data member and array to create objects. Do not use constructors.}{15}}
\@writefile{toc}{\contentsline {section}{\numberline {11.}Write a program to values of objects using 'friend' functions.}{15}}
\@writefile{toc}{\contentsline {section}{\numberline {12.}Write a program to create a class Matrix of size m x n. Define all possible matrix operations for Matrix type objects.}{16}}
\@writefile{toc}{\contentsline {section}{\numberline {13.}Write a program to create a class FLOAT that contains one float data member. Overload all the four arithmetic operators so that they operate on the objects of FLOAT.}{18}}
\@writefile{toc}{\contentsline {section}{\numberline {14.}Write a program to compare two strings by overloading the '==' operator.}{19}}
\@writefile{toc}{\contentsline {section}{\numberline {15.}Write a program to create a class account that stores customer name, account number and type of account. Create two more classes for current a/c and savings a/c. The current a/c will have:\\$*$ cheque facility, \\$*$ minimum balance and deduction for balance below that,\\$*$ deposit and withdrawal. The saving a/c will have similar member methods, except for cheque and minimum balance, it will have an interest calculation. Do not use constructors.}{20}}
\@writefile{toc}{\contentsline {section}{\numberline {16.}Rewrite the above program using constructors.}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {17.} An educational institution wishes to maintain a database of its employees. The database is divided into a number of classes whose hierarchical relationships are shown in figure below. The figure also shows the minimum information required for each class. Specify all the classes and define functions to create the database and retrieve individual information as and when required.}{25}}
\@writefile{toc}{\contentsline {section}{\numberline {18.}Consider a class network as shown below. Define all four classes and write a program to create, update and display the information contained in master objects.}{27}}
\@writefile{toc}{\contentsline {section}{\numberline {19.}Write a program demonstrating overriding using 'virtual'.}{29}}
\@writefile{toc}{\contentsline {section}{\numberline {20.}Write a program implementing Shape class, from which Triangle and Rectangle inherit. Use 'virtual'}{29}}
\@writefile{toc}{\contentsline {section}{\numberline {21.}Rewrite the previous program without using 'virtual'.}{31}}
\@writefile{toc}{\contentsline {section}{\numberline {22.}Write a function template for finding the minimum value contained in an array.}{32}}
\@writefile{toc}{\contentsline {section}{\numberline {23.}Write a program containing a possible exception. Perform exception handling with multiple catch.}{32}}
\@writefile{toc}{\contentsline {section}{\numberline {24.}Write a program to demonstrate the concept of rethrowing an exception.}{33}}
\@writefile{toc}{\contentsline {section}{\numberline {25.}Write a class template to represent a generic vector. Include member functions to perform the following taks:\\$*$ to create a vector\\$*$ to modify the value of a given element\\$*$ to multiply by a scalar.}{33}}
